HUFFMAN TREE VISUALIZATION
==========================

Example: Encoding "hello world"
Character frequencies: h:1, e:1, l:3, o:2, w:1, r:1, d:1, space:1

Step-by-step tree construction:

1. Start with individual nodes:
   h(1)  e(1)  l(3)  o(2)  w(1)  r(1)  d(1)  space(1)

2. Combine lowest frequencies (h:1 + e:1 = 2):
   l(3)  o(2)  he(2)  w(1)  r(1)  d(1)  space(1)

3. Combine next lowest (w:1 + r:1 = 2):
   l(3)  o(2)  he(2)  wr(2)  d(1)  space(1)

4. Combine next lowest (d:1 + space:1 = 2):
   l(3)  o(2)  he(2)  wr(2)  dspace(2)

5. Combine next lowest (o:2 + he:2 = 4):
   l(3)  ohe(4)  wr(2)  dspace(2)

6. Combine next lowest (wr:2 + dspace:2 = 4):
   l(3)  ohe(4)  wrdspace(4)

7. Combine next lowest (l:3 + ohe:4 = 7):
   lohe(7)  wrdspace(4)

8. Final combination (lohe:7 + wrdspace:4 = 11):
   root(11)

Final Huffman Tree:
                   root(11)
                 /         \
            lohe(7)         wrdspace(4)
           /      \        /         \
        l(3)    ohe(4)    wr(2)   dspace(2)
               /    \      /  \    /      \
            o(2)  he(2) w(1) r(1) d(1) space(1)
                  /  \
               h(1)  e(1)

Huffman Codes (0 = left, 1 = right):
'l':    00    (most frequent - shortest code)
'o':    01    (second most frequent)
'h':    100   (less frequent - longer code)
'e':    101
'w':    1100
'r':    1101
'd':    1110
' ':    1111  (least frequent - longest code)

Encoding "hello world":
h(100) + e(101) + l(00) + l(00) + o(01) + space(1111) + w(1100) + o(01) + r(1101) + l(00) + d(1110)

= 10010100000111110001101001110 (32 bits)

vs ASCII: 8 bits × 11 characters = 88 bits

Compression: 88 → 32 bits (63.6% reduction) 